// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders a row 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#eee",
      "flexDirection": "column",
      "width": 750,
    }
  }
>
  <View
    style={
      Object {
        "borderBottomWidth": 0,
        "marginTop": 0,
      }
    }
  >
    <RCTScrollView
      data={
        Array [
          Object {
            "account_sid": "account_sid",
            "address_requirements": "none",
            "api_version": "2010-04-01",
            "beta": false,
            "capabilities": Object {
              "fax": true,
              "mms": true,
              "sms": true,
              "voice": true,
            },
            "date_created": "Thu, 11 May 2017 04:05:46 +0000",
            "date_updated": "Fri, 12 May 2017 02:06:29 +0000",
            "emergency_address_sid": null,
            "emergency_status": "Inactive",
            "friendly_name": "(123) 123-1234",
            "phone_number": "+1231231234",
            "sid": "sid",
            "sms_application_sid": "",
            "sms_fallback_method": "POST",
            "sms_fallback_url": "",
            "sms_method": "POST",
            "sms_url": "https://handler.twilio.com/twiml/something",
            "status_callback": "",
            "status_callback_method": "POST",
            "trunk_sid": null,
            "uri": "/2010-04-01/Accounts/something/IncomingPhoneNumbers/somethingelse.json",
            "voice_application_sid": "",
            "voice_caller_id_lookup": false,
            "voice_fallback_method": "POST",
            "voice_fallback_url": "",
            "voice_method": "POST",
            "voice_receive_mode": "voice",
            "voice_url": "https://demo.twilio.com/welcome/voice/",
          },
        ]
      }
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      onViewableItemsChanged={undefined}
      renderItem={[Function]}
      renderScrollComponent={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      style={
        Object {
          "marginBottom": 30,
        }
      }
      updateCellsBatchingPeriod={50}
      windowSize={21}
    >
      <View>
        <View
          onLayout={[Function]}
        >
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            nativeID={undefined}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                },
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderBottomColor": "#bbb",
                    "borderBottomWidth": 1,
                    "paddingBottom": 10,
                    "paddingRight": 10,
                    "paddingTop": 10,
                  },
                  Object {
                    "borderBottomWidth": 0,
                    "paddingBottom": 10,
                    "paddingTop": 10,
                  },
                ],
              ]
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <View
              style={
                Array [
                  Object {
                    "flexDirection": "row",
                    "marginLeft": 10,
                  },
                  undefined,
                ]
              }
            >
              <View
                style={
                  Object {
                    "flex": 1,
                    "justifyContent": "center",
                  }
                }
              >
                <View
                  style={undefined}
                >
                  <View />
                </View>
                <View
                  style={undefined}
                >
                  <View />
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
</View>
`;

exports[`renders empty rows 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#eee",
      "flexDirection": "column",
      "width": 750,
    }
  }
>
  <View
    style={
      Object {
        "borderBottomWidth": 0,
        "marginTop": 0,
      }
    }
  >
    <RCTScrollView
      data={Array []}
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      onViewableItemsChanged={undefined}
      renderItem={[Function]}
      renderScrollComponent={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      style={
        Object {
          "marginBottom": 30,
        }
      }
      updateCellsBatchingPeriod={50}
      windowSize={21}
    >
      <View />
    </RCTScrollView>
  </View>
</View>
`;

exports[`renders rows 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#eee",
      "flexDirection": "column",
      "width": 750,
    }
  }
>
  <View
    style={
      Object {
        "borderBottomWidth": 0,
        "marginTop": 0,
      }
    }
  >
    <RCTScrollView
      data={
        Array [
          Object {
            "account_sid": "account_sid",
            "address_requirements": "none",
            "api_version": "2010-04-01",
            "beta": false,
            "capabilities": Object {
              "fax": true,
              "mms": true,
              "sms": true,
              "voice": true,
            },
            "date_created": "Thu, 11 May 2017 04:05:46 +0000",
            "date_updated": "Fri, 12 May 2017 02:06:29 +0000",
            "emergency_address_sid": null,
            "emergency_status": "Inactive",
            "friendly_name": "(123) 123-1234",
            "phone_number": "+1231231234",
            "sid": "sid",
            "sms_application_sid": "",
            "sms_fallback_method": "POST",
            "sms_fallback_url": "",
            "sms_method": "POST",
            "sms_url": "https://handler.twilio.com/twiml/something",
            "status_callback": "",
            "status_callback_method": "POST",
            "trunk_sid": null,
            "uri": "/2010-04-01/Accounts/something/IncomingPhoneNumbers/somethingelse.json",
            "voice_application_sid": "",
            "voice_caller_id_lookup": false,
            "voice_fallback_method": "POST",
            "voice_fallback_url": "",
            "voice_method": "POST",
            "voice_receive_mode": "voice",
            "voice_url": "https://demo.twilio.com/welcome/voice/",
          },
          Object {
            "account_sid": "account_sid1",
            "address_requirements": "none",
            "api_version": "2010-04-01",
            "beta": false,
            "capabilities": Object {
              "fax": true,
              "mms": true,
              "sms": true,
              "voice": true,
            },
            "date_created": "Thu, 11 May 2017 04:05:46 +0000",
            "date_updated": "Fri, 12 May 2017 02:06:29 +0000",
            "emergency_address_sid": null,
            "emergency_status": "Inactive",
            "friendly_name": "(123) 123-1235",
            "phone_number": "+1231231235",
            "sid": "sid1",
            "sms_application_sid": "",
            "sms_fallback_method": "POST",
            "sms_fallback_url": "",
            "sms_method": "POST",
            "sms_url": "https://handler.twilio.com/twiml/something",
            "status_callback": "",
            "status_callback_method": "POST",
            "trunk_sid": null,
            "uri": "/2010-04-01/Accounts/something/IncomingPhoneNumbers/somethingelse.json",
            "voice_application_sid": "",
            "voice_caller_id_lookup": false,
            "voice_fallback_method": "POST",
            "voice_fallback_url": "",
            "voice_method": "POST",
            "voice_receive_mode": "voice",
            "voice_url": "https://demo.twilio.com/welcome/voice/",
          },
        ]
      }
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      onViewableItemsChanged={undefined}
      renderItem={[Function]}
      renderScrollComponent={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      style={
        Object {
          "marginBottom": 30,
        }
      }
      updateCellsBatchingPeriod={50}
      windowSize={21}
    >
      <View>
        <View
          onLayout={[Function]}
        >
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            nativeID={undefined}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                },
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderBottomColor": "#bbb",
                    "borderBottomWidth": 1,
                    "paddingBottom": 10,
                    "paddingRight": 10,
                    "paddingTop": 10,
                  },
                  Object {
                    "borderBottomWidth": 0,
                    "paddingBottom": 10,
                    "paddingTop": 10,
                  },
                ],
              ]
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <View
              style={
                Array [
                  Object {
                    "flexDirection": "row",
                    "marginLeft": 10,
                  },
                  undefined,
                ]
              }
            >
              <View
                style={
                  Object {
                    "flex": 1,
                    "justifyContent": "center",
                  }
                }
              >
                <View
                  style={undefined}
                >
                  <View />
                </View>
                <View
                  style={undefined}
                >
                  <View />
                </View>
              </View>
            </View>
          </View>
        </View>
        <View
          onLayout={[Function]}
        >
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            nativeID={undefined}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                },
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderBottomColor": "#bbb",
                    "borderBottomWidth": 1,
                    "paddingBottom": 10,
                    "paddingRight": 10,
                    "paddingTop": 10,
                  },
                  Object {
                    "borderBottomWidth": 0,
                    "paddingBottom": 10,
                    "paddingTop": 10,
                  },
                ],
              ]
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <View
              style={
                Array [
                  Object {
                    "flexDirection": "row",
                    "marginLeft": 10,
                  },
                  undefined,
                ]
              }
            >
              <View
                style={
                  Object {
                    "flex": 1,
                    "justifyContent": "center",
                  }
                }
              >
                <View
                  style={undefined}
                >
                  <View />
                </View>
                <View
                  style={undefined}
                >
                  <View />
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
</View>
`;
