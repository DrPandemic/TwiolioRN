// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders a message 1`] = `
<View
  onLongPress={undefined}
  onPress={undefined}
  style={
    Object {
      "margin": 10,
      "marginRight": 50,
    }
  }
  underlayColor="white"
>
  <View
    style={
      Array [
        Object {
          "flexDirection": "row",
          "marginLeft": 10,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Object {
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <View
        style={undefined}
      >
        <View>
          <View
            style={
              Object {
                "alignSelf": "flex-start",
                "backgroundColor": "#d05ce3",
                "borderRadius": 10,
                "padding": 10,
              }
            }
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              disabled={false}
              ellipsizeMode="tail"
              style={
                Object {
                  "color": "#ffffff",
                }
              }
            >
              foo
            </Text>
          </View>
        </View>
      </View>
      <View
        style={undefined}
      >
        <View />
      </View>
    </View>
  </View>
</View>
`;

exports[`renders a message 2`] = `
<View
  onLongPress={undefined}
  onPress={undefined}
  style={
    Object {
      "margin": 10,
      "marginLeft": 50,
      "marginRight": 30,
    }
  }
  underlayColor="white"
>
  <View
    style={
      Array [
        Object {
          "flexDirection": "row",
          "marginLeft": 10,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Object {
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <View
        style={undefined}
      >
        <View>
          <View
            style={
              Object {
                "alignSelf": "flex-end",
                "backgroundColor": "#fff",
                "borderRadius": 10,
                "padding": 10,
              }
            }
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              disabled={false}
              ellipsizeMode="tail"
              style={
                Object {
                  "textAlign": "right",
                }
              }
            >
              foo
            </Text>
          </View>
        </View>
      </View>
      <View
        style={undefined}
      >
        <View />
      </View>
    </View>
  </View>
</View>
`;

exports[`renders an empty conversation 1`] = `
<View
  style={Object {}}
>
  <View
    style={
      Object {
        "flexDirection": "column",
        "height": 1284,
        "width": 750,
      }
    }
  >
    <RCTScrollView
      data={Array []}
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      onViewableItemsChanged={undefined}
      renderItem={[Function]}
      renderScrollComponent={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      style={
        Array [
          Object {
            "backgroundColor": "#eee",
            "marginBottom": 80,
          },
          Object {
            "transform": Array [
              Object {
                "scaleY": -1,
              },
            ],
          },
        ]
      }
      updateCellsBatchingPeriod={50}
      windowSize={21}
    >
      <View />
    </RCTScrollView>
  </View>
  <View
    style={
      Object {
        "bottom": 0,
        "flexDirection": "row",
        "height": 80,
        "position": "absolute",
        "zIndex": 2,
      }
    }
  >
    <TextInput
      onChangeText={[Function]}
      placeholder="Type an SMS message"
      returnKeyType="send"
      style={
        Object {
          "height": 50,
          "marginRight": -40,
          "width": 750,
        }
      }
    />
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
          },
          Object {
            "height": 50,
            "paddingRight": 15,
            "paddingTop": 10,
          },
        ]
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={false}
        disabled={false}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "#aaa",
              "fontSize": 24,
            },
            Array [
              Object {
                "backgroundColor": "transparent",
              },
              undefined,
            ],
            Object {
              "fontFamily": "Material Icons",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
          ]
        }
      >
        î…£
      </Text>
    </View>
  </View>
</View>
`;

exports[`renders an non-empty conversation 1`] = `
<View
  style={Object {}}
>
  <View
    style={
      Object {
        "flexDirection": "column",
        "height": 1284,
        "width": 750,
      }
    }
  >
    <RCTScrollView
      data={
        Array [
          Message {
            "body": "bar",
            "dateCreated": 2017-05-12T02:46:30.000Z,
            "dateSent": 2017-05-12T02:46:31.000Z,
            "dateUpdated": 2017-05-12T02:46:31.000Z,
            "direction": "outbound-api",
            "from": "+1231231234",
            "sid": "somesid5",
            "status": "delivered",
            "to": "+1231231235",
          },
          Message {
            "body": "foo",
            "dateCreated": 2017-05-12T02:46:30.000Z,
            "dateSent": 2017-05-12T02:46:31.000Z,
            "dateUpdated": 2017-05-12T02:46:31.000Z,
            "direction": "inbound",
            "from": "+1231231235",
            "sid": "somesid0",
            "status": "received",
            "to": "+1231231234",
          },
        ]
      }
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      onViewableItemsChanged={undefined}
      renderItem={[Function]}
      renderScrollComponent={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      style={
        Array [
          Object {
            "backgroundColor": "#eee",
            "marginBottom": 80,
          },
          Object {
            "transform": Array [
              Object {
                "scaleY": -1,
              },
            ],
          },
        ]
      }
      updateCellsBatchingPeriod={50}
      windowSize={21}
    >
      <View>
        <View
          onLayout={[Function]}
        >
          <View
            style={
              Object {
                "transform": Array [
                  Object {
                    "scaleY": -1,
                  },
                ],
              }
            }
          >
            <View
              onLongPress={undefined}
              onPress={undefined}
              style={
                Object {
                  "margin": 10,
                  "marginRight": 50,
                }
              }
              underlayColor="white"
            >
              <View
                style={
                  Array [
                    Object {
                      "flexDirection": "row",
                      "marginLeft": 10,
                    },
                    undefined,
                  ]
                }
              >
                <View
                  style={
                    Object {
                      "flex": 1,
                      "justifyContent": "center",
                    }
                  }
                >
                  <View
                    style={undefined}
                  >
                    <View>
                      <View
                        style={
                          Object {
                            "alignSelf": "flex-start",
                            "backgroundColor": "#d05ce3",
                            "borderRadius": 10,
                            "padding": 10,
                          }
                        }
                      >
                        <Text
                          accessible={true}
                          allowFontScaling={true}
                          disabled={false}
                          ellipsizeMode="tail"
                          style={
                            Object {
                              "color": "#ffffff",
                            }
                          }
                        >
                          bar
                        </Text>
                      </View>
                    </View>
                  </View>
                  <View
                    style={undefined}
                  >
                    <View />
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
        <View
          onLayout={[Function]}
        >
          <View
            style={
              Object {
                "transform": Array [
                  Object {
                    "scaleY": -1,
                  },
                ],
              }
            }
          >
            <View
              onLongPress={undefined}
              onPress={undefined}
              style={
                Object {
                  "margin": 10,
                  "marginLeft": 50,
                  "marginRight": 30,
                }
              }
              underlayColor="white"
            >
              <View
                style={
                  Array [
                    Object {
                      "flexDirection": "row",
                      "marginLeft": 10,
                    },
                    undefined,
                  ]
                }
              >
                <View
                  style={
                    Object {
                      "flex": 1,
                      "justifyContent": "center",
                    }
                  }
                >
                  <View
                    style={undefined}
                  >
                    <View>
                      <View
                        style={
                          Object {
                            "alignSelf": "flex-end",
                            "backgroundColor": "#fff",
                            "borderRadius": 10,
                            "padding": 10,
                          }
                        }
                      >
                        <Text
                          accessible={true}
                          allowFontScaling={true}
                          disabled={false}
                          ellipsizeMode="tail"
                          style={
                            Object {
                              "textAlign": "right",
                            }
                          }
                        >
                          foo
                        </Text>
                      </View>
                    </View>
                  </View>
                  <View
                    style={undefined}
                  >
                    <View />
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
  <View
    style={
      Object {
        "bottom": 0,
        "flexDirection": "row",
        "height": 80,
        "position": "absolute",
        "zIndex": 2,
      }
    }
  >
    <TextInput
      onChangeText={[Function]}
      placeholder="Type an SMS message"
      returnKeyType="send"
      style={
        Object {
          "height": 50,
          "marginRight": -40,
          "width": 750,
        }
      }
    />
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
          },
          Object {
            "height": 50,
            "paddingRight": 15,
            "paddingTop": 10,
          },
        ]
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={false}
        disabled={false}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "#aaa",
              "fontSize": 24,
            },
            Array [
              Object {
                "backgroundColor": "transparent",
              },
              undefined,
            ],
            Object {
              "fontFamily": "Material Icons",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
          ]
        }
      >
        î…£
      </Text>
    </View>
  </View>
</View>
`;
